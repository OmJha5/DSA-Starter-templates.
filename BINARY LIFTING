void dfs(int node , int parent , vector<vector<int>> &dp , vector<int> &level , vector<int> adj[]){
        level[node] = level[parent] + 1;

        dp[node][0] = parent;
        for(int i = 1; i < LN; i++){
            int prev = dp[node][i - 1];
            if (prev == -1) break;
            dp[node][i] = dp[prev][i - 1];
        }

        for(auto &it : adj[node]){
            if(it != parent){
                dfs(it , node , dp , level , adj);
            }
        }
    }

    int findLCA(int u , int v , vector<vector<int>> &dp , vector<int> &level){
        if(level[u] < level[v]){
            swap(u , v);
        }

        int diff = level[u] - level[v];
    
        for(int i = 0; i < LN; i++){
            if((1 << i) & diff){
                u = dp[u][i];
            }
        }

        if(u == v) return v;

        for(int i = LN - 1; i >= 0; i--){
            if(dp[u][i] != dp[v][i]){
                u = dp[u][i];
                v = dp[v][i];
            }
        }

        return dp[u][0];
    }

int LN = log2(n) + 1;
vector<vector<int>> dp(n + 1 , vector<int>(LN + 1 , -1));
vector<int> level(n + 1 , 0);
